{"slots":{"0":{"name":"screen1","type":{"events":[],"methods":[]}},"1":{"name":"core","type":{"events":[],"methods":[]}},"2":{"name":"hub1","type":{"events":[],"methods":[]}},"3":{"name":"hub2","type":{"events":[],"methods":[]}},"4":{"name":"hub3","type":{"events":[],"methods":[]}},"5":{"name":"hub4","type":{"events":[],"methods":[]}},"6":{"name":"hub5","type":{"events":[],"methods":[]}},"7":{"name":"hub6","type":{"events":[],"methods":[]}},"8":{"name":"hub7","type":{"events":[],"methods":[]}},"9":{"name":"hub8","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"2"},"key":"0"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"3"},"key":"1"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"4"},"key":"2"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"5"},"key":"3"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"6"},"key":"4"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"7"},"key":"5"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"8"},"key":"6"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"9"},"key":"7"},{"code":"if not StorageReady then\n    local pass = true\n    for i,_ in ipairs(Hubs) do\n        if DEBUG then system.print(\"Hub\"..i..\": \"..rslib.toString(Hubs[i][\"storeAcq\"])) end\n        if not Hubs[i][\"storeAcq\"] then\n            pass = false\n        end\n    end\n    StorageReady = pass\nelse\n    if not MsgList then\n        local items, core = {}, {}\n        for i, _ in ipairs(Hubs) do\n            local item = getItems(Hubs[i][\"hub\"])\n            table.insert(items, item)\n        end\n        if Ship then\n            core = getShip()\n        elseif Land then\n            core = getLand()\n        elseif Space then\n            core = getSpace()\n        end\n        MsgList = createMessageList(items, core)\n        DataStart = false\n        sendOutput(\"READY\")\n    else\n        if not DataStart then\n            if DEBUG then system.print(\"DataStart = false\") end\n            waitForAck()\n        else\n            if ACK then\n                if DEBUG then system.print(\"ACK = true\") end\n                ACK = false\n                MsgList = processOutput(MsgList)\n            else\n                if DEBUG then system.print(\"ACK = false\") end\n                waitForAck()\n            end\n        end\n    end\nend","filter":{"args":[{"value":"comms"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"8"},{"code":"unit.stopTimer(\"comms\")","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"9"},{"code":"-- Required Libraries\njson = require('dkjson')\nrslib = require('rslib')\n\n-- Don't turn this on unless you know that your chat will get spammed.\nDEBUG = false\n\n-- global variables\nMaxVolume = 1150000 --export: (Default 1150000) Put the maximum volume of your containers in L. 1 kL = 1000 L\nDataStart = false\n\n-- find my hubs\nlocal hublist = { hub1, hub2, hub3, hub4, hub5, hub6, hub7, hub8 }\nHubs = {}\n\nfor i,v in ipairs(hublist) do\n    if hublist[i] then\n        local t = { eId = hublist[i].getId(), storeAcq = false, hub = hublist[i] }\n        table.insert(Hubs, t)\n    end\nend\n\n-- base functions to be used later\nfunction round2 (num, numDecimalPlaces)\n    return tonumber(string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num))\n  end\n\nfunction maxForceForward ()\n    local axisCRefDirection = vec3(core.getConstructOrientationForward())\n    local longitudinalEngineTags = 'thrust analog longitudinal'\n    local maxKPAlongAxis = core.getMaxKinematicsParametersAlongAxis(longitudinalEngineTags, {axisCRefDirection:unpack()})\n    if unit.getAtmosphereDensity() == 0 then -- we are in space\n        return maxKPAlongAxis[3]\n    else\n        return maxKPAlongAxis[1]\n    end\nend\n\nfunction getItems (hub)\n    local c = json.decode(hub.getItemsList())\n    local out = {}\n    if DEBUG then system.print(\"container: \"..rslib.toString(c)) end\n    for i, v in ipairs(c) do\n        local item = c[i]\n        local t = {}\n        t[\"id\"] = i\n        t[\"name\"] = item[\"name\"]\n        t[\"qty\"] = item[\"quantity\"]\n        t[\"unitv\"] = round2(item[\"unitVolume\"], 2)\n        t[\"unitm\"] = round2(item[\"unitMass\"], 2)\n        table.insert(out,i,t)\n    end\n    return out\nend\n\nfunction createMessageList (items, core)\n    local t = {}\n    if DEBUG then system.print(\"Processed: \"..rslib.toString(items)) end\n    table.insert(t,1,\"START\")\n    for h=1,#Hubs do\n        for i,_ in ipairs(items[h]) do\n            table.insert(t, i+1, items[h][i])\n        end\n    end\n    table.insert(t, core)\n    table.insert(t, \"DONE\")\n    return t\nend\n\nfunction sendOutput (message)\n    if message ~= nil then\n        message = json.encode(message)\n        if DEBUG then system.print(\"Raw: \"..rslib.toString(message)) end\n        screen1.setScriptInput(message)\n    end\nend\n\nfunction processOutput (messages)\n    if DEBUG then system.print(\"Sending \"..rslib.toString(messages[1])) end\n    if messages[1] == \"START\" then\n        sendOutput(\"START\")\n        table.remove(messages, 1)\n        waitForAck()\n        return messages\n    elseif messages[1] == \"DONE\" then\n        sendOutput(\"DONE\")\n        return false\n    else\n        sendOutput(messages[1])\n        table.remove(messages, 1)\n        waitForAck()\n        return messages\n    end\nend\n\nfunction waitForAck ()\n    local ack = screen1.getScriptOutput() or false\n    if ack and ack ~= \"\" then\n        if DEBUG then system.print(ack..\" received.\") end\n        if ack == \"START\" then\n            DataStart = true\n            ACK = true\n            screen1.clearScriptOutput()\n            ack = nil\n        end\n        if ack == \"ACK\" then\n            sendOutput(\"SYN\")\n            screen1.clearScriptOutput()\n            ack = nil\n        end\n        if ack == \"ACKSYN\" then\n            DataStart = true\n            ACK = true\n            screen1.clearScriptOutput()\n            ack = nil\n        end\n    end\nend\n\nfunction hubsItems (hubs)\n    local m = 0\n    local l = 0\n    for i=1,#hubs do\n        m = m + hubs[i][\"hub\"].getItemsMass()\n        l = l + hubs[i][\"hub\"].getItemsVolume()\n    end\n    return m, l\nend\n\nfunction getShip ()\n    local hM, hV = hubsItems(Hubs)\n    local tM = core.getConstructMass()\n    local g = core.g()\n    local mt = maxForceForward()\n    local t = {}\n    t[\"name\"] = \"ship\"\n    t[\"mass\"] = round2(tM, 2)\n    t[\"hmass\"] = round2(hM, 2)\n    t[\"hmaxvol\"] = round2(MaxVolume, 2)\n    t[\"hvol\"] = round2(hV, 2)\n    t[\"g\"] = round2(g, 2)\n    t[\"maxth\"] = round2(mt, 2)\n    if DEBUG then system.print(\"Ship: \"..rslib.toString(t)) end\n    return t\nend\n\nfunction getLand ()\n    local hM, hV = hubsItems(Hubs)\n    local t = {}\n    t[\"name\"] = \"land\"\n    t[\"hmass\"] = round2(hM, 2)\n    t[\"hmaxvol\"] = round2(MaxVolume, 2)\n    t[\"hvol\"] = round2(hV, 2)\n    if DEBUG then system.print(\"Land: \"..rslib.toString(t)) end\n    return t\nend\n\nfunction getSpace ()\n    local hM, hV = hubsItems(Hubs)\n    local tM = core.getConstructMass()\n    local g = core.g()\n    local t = {}\n    t[\"name\"] = \"space\"\n    t[\"mass\"] = round2(tM, 2)\n    t[\"hmass\"] = round2(hM, 2)\n    t[\"hmaxvol\"] = round2(MaxVolume, 2)\n    t[\"hvol\"] = round2(hV, 2)\n    t[\"g\"] = round2(g, 5)\n    if DEBUG then system.print(\"Space: \"..rslib.toString(t)) end\n    return t\nend\n\n-- Initializations\nif #Hubs == 0 or not core or not screen1 then\n    system.print(\"Error: Elements not found. Please attach your screen, core, and/or hubs. Exiting.\")\n    unit.exit()\nelse\n    screen1.clearScriptOutput()\n    local coreData = json.decode(core.getData())\n    if DEBUG then system.print(\"Core: \"..rslib.toString(coreData)) end\n    if coreData[\"name\"]:find(\"Dynamic\") then\n        if DEBUG then system.print(\"Ship\") end\n        Ship = true\n    elseif coreData[\"name\"]:find(\"Static\") then\n        if DEBUG then system.print(\"Land\") end\n        Land = true\n    elseif coreData[\"name\"]:find(\"Space\") then\n        if DEBUG then system.print(\"Space\") end\n        Space = true\n    end\n\n    system.print(\"Acquiring Storage...\")\n    for i, v in ipairs(Hubs) do\n        if DEBUG then system.print(\"Opening hub \"..i) end\n        v[\"hub\"].acquireStorage()\n    end\n\n    -- Activate Timers\n    unit.setTimer(\"comms\",0.0666667)\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"10"}],"methods":[],"events":[]}