{"slots":{"0":{"name":"screen1","type":{"events":[],"methods":[]}},"1":{"name":"hub1","type":{"events":[],"methods":[]}},"2":{"name":"core","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"","filter":{"args":[],"signature":"()","slotKey":"0"},"key":"0"},{"code":"storageAcq = true","filter":{"args":[],"signature":"storageAcquired()","slotKey":"1"},"key":"1"},{"code":"local json = require('dkjson')\n\nlocal currContVol = hub1.getItemsVolume()\nlocal contMass = hub1.getItemsMass()\nlocal shipMass = core.getConstructMass()\nlocal currGravity = core.g()\n\nfunction prettyStr (x)\n    if type(x) == 'table' then\n        local elems = {}\n        for k, v in pairs(x) do\n            table.insert(elems, string.format('%s = %s', prettyStr(k), prettyStr(v)))\n        end\n        return string.format('{%s}', table.concat(elems, ', '))\n    else\n        return tostring(x)\n    end\nend\n\nfunction round2(num, numDecimalPlaces)\n    return tonumber(string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num))\n  end\n\nfunction maxForceForward()\n    local axisCRefDirection = vec3(core.getConstructOrientationForward())\n    local longitudinalEngineTags = 'thrust analog longitudinal'\n    local maxKPAlongAxis = core.getMaxKinematicsParametersAlongAxis(longitudinalEngineTags, {axisCRefDirection:unpack()})\n    if unit.getAtmosphereDensity() == 0 then -- we are in space\n        return maxKPAlongAxis[3]\n    else\n        return maxKPAlongAxis[1]\n    end\nend\n\nlocal maxThrust = maxForceForward()\n\nfunction getStorage ()\n    system.print(\"Acquiring Storage...\")\n    hub1.acquireStorage()\n    storeCall = true\nend\n\nfunction getItems ()\n    local container = json.decode(hub1.getItemsList())\n    if container then\n        local out = {}\n        system.print(\"container: \"..prettyStr(container))\n        for i, v in ipairs(container) do\n            local item = container[i]\n            local t = {}\n            t[\"id\"] = i\n            t[\"name\"] = item[\"name\"]\n            t[\"qty\"] = item[\"quantity\"]\n            t[\"unitv\"] = round2(item[\"unitVolume\"], 2)\n            t[\"unitm\"] = round2(item[\"unitMass\"], 2)\n            table.insert(out,i,t)\n        end\n        Items = out\n    end\nend\n\nfunction getShip ()\n    Ship = {}\n    Ship[\"name\"] = \"ship\"\n    Ship[\"shipm\"] = round2(shipMass, 2)\n    Ship[\"contm\"] = round2(contMass, 2)\n    Ship[\"maxv\"] = round2(maxContVol, 2)\n    Ship[\"contv\"] = round2(currContVol, 2)\n    Ship[\"g\"] = round2(currGravity, 2)\n    Ship[\"maxth\"] = round2(maxThrust, 2)\n    system.print(\"Ship: \"..prettyStr(Ship))\nend\n\nfunction sendOutput (message)\n    if message ~= nil then\n        local encodedMessage = json.encode(message)\n        --system.print(\"Raw: \"..prettyStr(message))\n        screen1.setScriptInput(encodedMessage)\n    end\nend\n\nfunction waitForAck()\n    ack = screen1.getScriptOutput() or false\n    if not ack then\n        system.print(\"Waiting for ACK.\")\n    elseif ack == \"ACK\" then\n        screen1.clearScriptOutput()\n        system.print(\"ACK Received.\")\n        Ack = true\n    end\nend\n\nfunction processMessages (Items, Ship)\n    MsgList = {}\n    for i,_ in ipairs(Items) do\n        table.insert(MsgList, i, Items[i])\n    end\n    table.insert(MsgList, Ship)\n    table.insert(MsgList, \"DONE\")\nend\n\nfunction processOutput ()\n    if not Init then\n        Init = true\n        Ack = true\n        sendOutput(\"\")\n    end\n    if Ack then\n        if MsgList[1] == \"DONE\" then\n            sendOutput(MsgList[1])\n            MsgList = false\n        else\n            sendOutput(MsgList[1])\n            table.remove(MsgList, 1)\n        end\n        Ack = false\n    else\n        waitForAck()\n    end\nend\n\nfunction main ()\n    if not MsgList then\n        if not Items then\n            getItems()\n        end\n        if not Ship then\n            getShip()\n        end\n        processMessages(Items, Ship)\n        Items = false\n        Ship = false\n    else\n        processOutput()\n    end\nend\n\nif not storageAcq and not storeCall then\n    getStorage()\nend\nif storageAcq then\n    main()\nend","filter":{"args":[{"value":"check"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"unit.stopTimer(\"check\",1)","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"3"},{"code":"maxContVol = 1150000 --export: (Default 100) Put the maximum volume of your containers in L. 1 kL = 1000 L\nstoreCall = false\nunit.setTimer(\"check\",0.0666667)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}