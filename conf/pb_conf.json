{"slots":{"0":{"name":"screen1","type":{"events":[],"methods":[]}},"1":{"name":"core","type":{"events":[],"methods":[]}},"2":{"name":"hub1","type":{"events":[],"methods":[]}},"3":{"name":"hub2","type":{"events":[],"methods":[]}},"4":{"name":"hub3","type":{"events":[],"methods":[]}},"5":{"name":"hub4","type":{"events":[],"methods":[]}},"6":{"name":"hub5","type":{"events":[],"methods":[]}},"7":{"name":"hub6","type":{"events":[],"methods":[]}},"8":{"name":"hub7","type":{"events":[],"methods":[]}},"9":{"name":"hub8","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"2"},"key":"0"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"3"},"key":"1"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"4"},"key":"2"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"5"},"key":"3"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"6"},"key":"4"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"7"},"key":"5"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"8"},"key":"6"},{"code":"local eId = 0\nfor i,v in ipairs(Hubs) do\n    eId = v[\"hub\"].getId()\n    if v[\"eId\"] == eId then\n        v[\"storeAcq\"] = true\n    end\nend","filter":{"args":[],"signature":"storageAcquired()","slotKey":"9"},"key":"7"},{"code":"if timerId == \"storage\" then\n    if not StorageReady then\n        local pass = true\n        for i,_ in ipairs(Hubs) do\n            if DEBUG then system.print(\"Hub\"..i..\": \"..rslib.toString(Hubs[i][\"storeAcq\"])) end\n            if not Hubs[i][\"storeAcq\"] then\n                pass = false\n            end\n        end\n        StorageReady = pass\n        if StorageTimeout > 0 then\n            StorageTimeout = StorageTimeout-1\n        else\n            system.print(\"Error: Storage Timeout exceeded. Check for standby timer. Exiting.\")\n            unit.exit()\n        end\n    else\n        unit.stopTimer(\"storage\")\n        unit.setTimer(\"ingestion\",30)\n    end\nelseif timerId == \"ingestion\" then\n    unit.stopTimer(\"consumer\")\n    sendOutput(\"POLLING\")\n    if DEBUG then system.print(\"Sent Polling.\") end\n    ItemsList = sortItems(getItems(Hubs))\n    if DEBUG then system.print(\"ItemsList populated.\") end\n    TotalPages = round2((#ItemsList/12),0)\n    if DEBUG then system.print(\"Total Pages: \"..tostring(TotalPages)) end\n    unit.setTimer(\"consumer\",0.066667)\nelseif timerId == \"consumer\" then\n    if not DataStart then\n        waitForAck()\n    else\n        if not MsgList then\n            MsgList = createMessageList()\n            if DEBUG then system.print(\"MsgList populated.\") end\n        else\n            if not DataReady then\n                DataReady = true\n                DataStart = false\n                sendOutput(\"READY\")\n            else\n                if ACK then\n                    if DEBUG then system.print(\"ACK = true\") end\n                    ACK = false\n                    MsgList = processOutput(MsgList)\n                    if not MsgList then DataStart, DataReady = false, false end\n                else\n                    if DEBUG then system.print(\"ACK = false\") end\n                    waitForAck()\n                end\n            end\n        end\n    end\nend\n","filter":{"args":[{"variable":"*"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"8"},{"code":"unit.stopTimer(\"storage\")\nunit.stopTimer(\"ingestion\")\nunit.stopTimer(\"consumer\")","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"9"},{"code":"-- Required Libraries\njson = require('dkjson')\nrslib = require('rslib')\n\n-- Don't turn this on unless you know that your chat will get spammed.\nDEBUG = false\n\n-- global variables\nMaxVolume = 1150000 --export: (Default 1150000) Put the maximum volume of your containers in L. 1 kL = 1000 L\nDataStart = false\nSortByMass = false --export: (Default false) Sorts by Volume or Mass.\n\n-- planet reference table\nlocal function Atlas()\n    return {\n        [0] = {\n            [0] = {\n                GM = 0,\n                bodyId = 0,\n                center = {\n                    x = 0,\n                    y = 0,\n                    z = 0\n                },\n                name = 'Space',\n                planetarySystemId = 0,\n                radius = 0,\n                hasAtmosphere = false,\n                gravity = 0,\n                noAtmosphericDensityAltitude = 0,\n                surfaceMaxAltitude = 0\n            },\n            [2] = {\n                name = \"Alioth\",\n                description = \"Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.9401,\n                atmosphericEngineMaxAltitude = 5580,\n                biosphere = \"Forest\",\n                classification = \"Mesoplanet\",\n                bodyId = 2,\n                GM = 157470826617,\n                gravity = 1.0082568597356114,\n                fullAtmosphericDensityMaxAltitude = -10,\n                habitability = \"High\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 6272,\n                numSatellites = 2,\n                positionFromSun = 2,\n                center = {\n                    x = -8,\n                    y = -8,\n                    z = -126303\n                },\n                radius = 126067.8984375,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 3410,\n                surfaceArea = 199718780928,\n                surfaceAverageAltitude = 200,\n                surfaceMaxAltitude = 1100,\n                surfaceMinAltitude = -330,\n                systemZone = \"High\",\n                territories = 259472,\n                type = \"Planet\",\n                waterLevel = 0,\n                planetarySystemId = 0\n            },\n            [21] = {\n                name = \"Alioth Moon 1\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 21,\n                GM = 2118960000,\n                gravity = 0.24006116402380084,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 457933,\n                    y = -1509011,\n                    z = 115524\n                },\n                radius = 30000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 11309733888,\n                surfaceAverageAltitude = 140,\n                surfaceMaxAltitude = 200,\n                surfaceMinAltitude = 10,\n                systemZone = nil,\n                territories = 14522,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [22] = {\n                name = \"Alioth Moon 4\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 22,\n                GM = 2165833514,\n                gravity = 0.2427018259886451,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = -1692694,\n                    y = 729681,\n                    z = -411464\n                },\n                radius = 30330,\n                safeAreaEdgeAltitude = 500000,\n                size = \"L\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 11559916544,\n                surfaceAverageAltitude = -15,\n                surfaceMaxAltitude = -5,\n                surfaceMinAltitude = -50,\n                systemZone = nil,\n                territories = 14522,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [5] = {\n                name = \"Feli\",\n                description = \"Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.5488,\n                atmosphericEngineMaxAltitude = 66725,\n                biosphere = \"Barren\",\n                classification = \"Mesoplanet\",\n                bodyId = 5,\n                GM = 16951680000,\n                gravity = 0.4801223280476017,\n                fullAtmosphericDensityMaxAltitude = 30,\n                habitability = \"Low\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 78500,\n                numSatellites = 1,\n                positionFromSun = 5,\n                center = {\n                    x = -43534464,\n                    y = 22565536,\n                    z = -48934464\n                },\n                radius = 41800,\n                safeAreaEdgeAltitude = 500000,\n                size = \"S\",\n                spaceEngineMinAltitude = 42800,\n                surfaceArea = 21956466688,\n                surfaceAverageAltitude = 18300,\n                surfaceMaxAltitude = 18500,\n                surfaceMinAltitude = 46,\n                systemZone = \"Low\",\n                territories = 27002,\n                type = \"Planet\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [50] = {\n                name = \"Feli Moon 1\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 50,\n                GM = 499917600,\n                gravity = 0.11202853997062348,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = -43902841.78,\n                    y = 22261034.7,\n                    z = -48862386\n                },\n                radius = 14000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"S\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 2463008768,\n                surfaceAverageAltitude = 800,\n                surfaceMaxAltitude = 900,\n                surfaceMinAltitude = 0,\n                systemZone = nil,\n                territories = 3002,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [120] = {\n                name = \"Ion\",\n                description = \"Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.9522,\n                atmosphericEngineMaxAltitude = 10480,\n                biosphere = \"Ice\",\n                classification = \"Hypopsychroplanet\",\n                bodyId = 120,\n                GM = 7135606629,\n                gravity = 0.36009174603570127,\n                fullAtmosphericDensityMaxAltitude = -30,\n                habitability = \"Average\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 17700,\n                numSatellites = 2,\n                positionFromSun = 12,\n                center = {\n                    x = 2865536.7,\n                    y = -99034464,\n                    z = -934462.02\n                },\n                radius = 44950,\n                safeAreaEdgeAltitude = 500000,\n                size = \"XS\",\n                spaceEngineMinAltitude = 6410,\n                surfaceArea = 25390383104,\n                surfaceAverageAltitude = 500,\n                surfaceMaxAltitude = 1300,\n                surfaceMinAltitude = 250,\n                systemZone = \"Average\",\n                territories = 32672,\n                type = \"Planet\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [121] = {\n                name = \"Ion Moon 1\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 121,\n                GM = 106830900,\n                gravity = 0.08802242599860607,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 2472916.8,\n                    y = -99133747,\n                    z = -1133582.8\n                },\n                radius = 11000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"XS\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 1520530944,\n                surfaceAverageAltitude = 100,\n                surfaceMaxAltitude = 200,\n                surfaceMinAltitude = 3,\n                systemZone = nil,\n                territories = 1922,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [122] = {\n                name = \"Ion Moon 2\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 122,\n                GM = 176580000,\n                gravity = 0.12003058201190042,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 2995424.5,\n                    y = -99275010,\n                    z = -1378480.7\n                },\n                radius = 15000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"XS\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 2827433472,\n                surfaceAverageAltitude = -1900,\n                surfaceMaxAltitude = -1400,\n                surfaceMinAltitude = -2100,\n                systemZone = nil,\n                territories = 3632,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [9] = {\n                name = \"Jago\",\n                description = \"Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.9835,\n                atmosphericEngineMaxAltitude = 9695,\n                biosphere = \"Water\",\n                classification = \"Mesoplanet\",\n                bodyId = 9,\n                GM = 18606274330,\n                gravity = 0.5041284298678057,\n                fullAtmosphericDensityMaxAltitude = -90,\n                habitability = \"Very High\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 10900,\n                numSatellites = 0,\n                positionFromSun = 9,\n                center = {\n                    x = -94134462,\n                    y = 12765534,\n                    z = -3634464\n                },\n                radius = 61590,\n                safeAreaEdgeAltitude = 500000,\n                size = \"XL\",\n                spaceEngineMinAltitude = 5900,\n                surfaceArea = 47668367360,\n                surfaceAverageAltitude = 0,\n                surfaceMaxAltitude = 1200,\n                surfaceMinAltitude = -500,\n                systemZone = \"Very High\",\n                territories = 60752,\n                type = \"Planet\",\n                waterLevel = 0,\n                planetarySystemId = 0\n            },\n            [100] = {\n                name = \"Lacobus\",\n                description = \"Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.7571,\n                atmosphericEngineMaxAltitude = 11120,\n                biosphere = \"Ice\",\n                classification = \"Psychroplanet\",\n                bodyId = 100,\n                GM = 13975172474,\n                gravity = 0.45611622622739767,\n                fullAtmosphericDensityMaxAltitude = -20,\n                habitability = \"Average\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 12510,\n                numSatellites = 3,\n                positionFromSun = 10,\n                center = {\n                    x = 98865536,\n                    y = -13534464,\n                    z = -934461.99\n                },\n                radius = 55650,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 6790,\n                surfaceArea = 38917074944,\n                surfaceAverageAltitude = 800,\n                surfaceMaxAltitude = 1660,\n                surfaceMinAltitude = 250,\n                systemZone = \"Average\",\n                territories = 50432,\n                type = \"Planet\",\n                waterLevel = 0,\n                planetarySystemId = 0\n            },\n            [102] = {\n                name = \"Lacobus Moon 1\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 102,\n                GM = 444981600,\n                gravity = 0.14403669598391783,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 99180968,\n                    y = -13783862,\n                    z = -926156.4\n                },\n                radius = 18000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"XL\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 4071504128,\n                surfaceAverageAltitude = 150,\n                surfaceMaxAltitude = 300,\n                surfaceMinAltitude = 10,\n                systemZone = nil,\n                territories = 5072,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [103] = {\n                name = \"Lacobus Moon 2\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 103,\n                GM = 211503600,\n                gravity = 0.11202853997062348,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 99250052,\n                    y = -13629215,\n                    z = -1059341.4\n                },\n                radius = 14000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 2463008768,\n                surfaceAverageAltitude = -1380,\n                surfaceMaxAltitude = -1280,\n                surfaceMinAltitude = -1880,\n                systemZone = nil,\n                territories = 3002,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [101] = {\n                name = \"Lacobus Moon 3\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 101,\n                GM = 264870000,\n                gravity = 0.12003058201190042,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 98905288.17,\n                    y = -13950921.1,\n                    z = -647589.53\n                },\n                radius = 15000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"L\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 2827433472,\n                surfaceAverageAltitude = 500,\n                surfaceMaxAltitude = 820,\n                surfaceMinAltitude = 3,\n                systemZone = nil,\n                territories = 3632,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [1] = {\n                name = \"Madis\",\n                description = \"Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.8629,\n                atmosphericEngineMaxAltitude = 7165,\n                biosphere = \"Barren\",\n                classification = \"hyperthermoplanet\",\n                bodyId = 1,\n                GM = 6930729684,\n                gravity = 0.36009174603570127,\n                fullAtmosphericDensityMaxAltitude = 220,\n                habitability = \"Low\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 8050,\n                numSatellites = 3,\n                positionFromSun = 1,\n                center = {\n                    x = 17465536,\n                    y = 22665536,\n                    z = -34464\n                },\n                radius = 44300,\n                safeAreaEdgeAltitude = 500000,\n                size = \"XS\",\n                spaceEngineMinAltitude = 4480,\n                surfaceArea = 24661377024,\n                surfaceAverageAltitude = 750,\n                surfaceMaxAltitude = 850,\n                surfaceMinAltitude = 670,\n                systemZone = \"Low\",\n                territories = 30722,\n                type = \"Planet\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [10] = {\n                name = \"Madis Moon 1\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 10,\n                GM = 78480000,\n                gravity = 0.08002039003323584,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 17448118.224,\n                    y = 22966846.286,\n                    z = 143078.82\n                },\n                radius = 10000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"XL\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 1256637056,\n                surfaceAverageAltitude = 210,\n                surfaceMaxAltitude = 420,\n                surfaceMinAltitude = 0,\n                systemZone = nil,\n                territories = 1472,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [11] = {\n                name = \"Madis Moon 2\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 11,\n                GM = 237402000,\n                gravity = 0.09602446196397631,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 17194626,\n                    y = 22243633.88,\n                    z = -214962.81\n                },\n                radius = 12000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"S\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 1809557376,\n                surfaceAverageAltitude = -700,\n                surfaceMaxAltitude = 300,\n                surfaceMinAltitude = -2900,\n                systemZone = nil,\n                territories = 1922,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [12] = {\n                name = \"Madis Moon 3\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 12,\n                GM = 265046609,\n                gravity = 0.12003058201190042,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 17520614,\n                    y = 22184730,\n                    z = -309989.99\n                },\n                radius = 15000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"S\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 2827433472,\n                surfaceAverageAltitude = 700,\n                surfaceMaxAltitude = 1100,\n                surfaceMinAltitude = 0,\n                systemZone = nil,\n                territories = 3632,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [26] = {\n                name = \"Sanctuary\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.9666,\n                atmosphericEngineMaxAltitude = 6935,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 26,\n                GM = 68234043600,\n                gravity = 1.0000000427743831,\n                fullAtmosphericDensityMaxAltitude = -30,\n                habitability = \"\",\n                hasAtmosphere = true,\n                isSanctuary = true,\n                noAtmosphericDensityAltitude = 7800,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = -1404835,\n                    y = 562655,\n                    z = -285074\n                },\n                radius = 83400,\n                safeAreaEdgeAltitude = 0,\n                size = \"L\",\n                spaceEngineMinAltitude = 4230,\n                surfaceArea = 87406149632,\n                surfaceAverageAltitude = 80,\n                surfaceMaxAltitude = 500,\n                surfaceMinAltitude = -60,\n                systemZone = nil,\n                territories = 111632,\n                type = \"\",\n                waterLevel = 0,\n                planetarySystemId = 0\n            },\n            [6] = {\n                name = \"Sicari\",\n                description = \"Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.897,\n                atmosphericEngineMaxAltitude = 7725,\n                biosphere = \"Desert\",\n                classification = \"Mesoplanet\",\n                bodyId = 6,\n                GM = 10502547741,\n                gravity = 0.4081039739797361,\n                fullAtmosphericDensityMaxAltitude = -625,\n                habitability = \"Average\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 8770,\n                numSatellites = 0,\n                positionFromSun = 6,\n                center = {\n                    x = 52765536,\n                    y = 27165538,\n                    z = 52065535\n                },\n                radius = 51100,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 4480,\n                surfaceArea = 32813432832,\n                surfaceAverageAltitude = 130,\n                surfaceMaxAltitude = 220,\n                surfaceMinAltitude = 50,\n                systemZone = \"Average\",\n                territories = 41072,\n                type = \"Planet\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [7] = {\n                name = \"Sinnen\",\n                description = \"Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.9226,\n                atmosphericEngineMaxAltitude = 10335,\n                biosphere = \"Desert\",\n                classification = \"Mesoplanet\",\n                bodyId = 7,\n                GM = 13033380591,\n                gravity = 0.4401121421448438,\n                fullAtmosphericDensityMaxAltitude = -120,\n                habitability = \"Average\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 11620,\n                numSatellites = 1,\n                positionFromSun = 7,\n                center = {\n                    x = 58665538,\n                    y = 29665535,\n                    z = 58165535\n                },\n                radius = 54950,\n                safeAreaEdgeAltitude = 500000,\n                size = \"S\",\n                spaceEngineMinAltitude = 6270,\n                surfaceArea = 37944188928,\n                surfaceAverageAltitude = 317,\n                surfaceMaxAltitude = 360,\n                surfaceMinAltitude = 23,\n                systemZone = \"Average\",\n                territories = 48002,\n                type = \"Planet\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [70] = {\n                name = \"Sinnen Moon 1\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 70,\n                GM = 396912600,\n                gravity = 0.1360346539426409,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 58969616,\n                    y = 29797945,\n                    z = 57969449\n                },\n                radius = 17000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"S\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 3631681280,\n                surfaceAverageAltitude = -2050,\n                surfaceMaxAltitude = -1950,\n                surfaceMinAltitude = -2150,\n                systemZone = nil,\n                territories = 4322,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [110] = {\n                name = \"Symeon\",\n                description = \"Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.9559,\n                atmosphericEngineMaxAltitude = 6920,\n                biosphere = \"Ice, Desert\",\n                classification = \"Hybrid\",\n                bodyId = 110,\n                GM = 9204742375,\n                gravity = 0.3920998898971822,\n                fullAtmosphericDensityMaxAltitude = -30,\n                habitability = \"High\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 7800,\n                numSatellites = 0,\n                positionFromSun = 11,\n                center = {\n                    x = 14165536,\n                    y = -85634465,\n                    z = -934464.3\n                },\n                radius = 49050,\n                safeAreaEdgeAltitude = 500000,\n                size = \"S\",\n                spaceEngineMinAltitude = 4230,\n                surfaceArea = 30233462784,\n                surfaceAverageAltitude = 39,\n                surfaceMaxAltitude = 450,\n                surfaceMinAltitude = 126,\n                systemZone = \"High\",\n                territories = 38882,\n                type = \"Planet\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [4] = {\n                name = \"Talemai\",\n                description = \"Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.8776,\n                atmosphericEngineMaxAltitude = 9685,\n                biosphere = \"Barren\",\n                classification = \"Psychroplanet\",\n                bodyId = 4,\n                GM = 14893847582,\n                gravity = 0.4641182439650478,\n                fullAtmosphericDensityMaxAltitude = -78,\n                habitability = \"Average\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 10890,\n                numSatellites = 3,\n                positionFromSun = 4,\n                center = {\n                    x = -13234464,\n                    y = 55765536,\n                    z = 465536\n                },\n                radius = 57500,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 5890,\n                surfaceArea = 41547563008,\n                surfaceAverageAltitude = 580,\n                surfaceMaxAltitude = 610,\n                surfaceMinAltitude = 520,\n                systemZone = \"Average\",\n                territories = 52922,\n                type = \"Planet\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [42] = {\n                name = \"Talemai Moon 1\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 42,\n                GM = 264870000,\n                gravity = 0.12003058201190042,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = -13058408,\n                    y = 55781856,\n                    z = 740177.76\n                },\n                radius = 15000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 2827433472,\n                surfaceAverageAltitude = 720,\n                surfaceMaxAltitude = 850,\n                surfaceMinAltitude = 0,\n                systemZone = nil,\n                territories = 3632,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [40] = {\n                name = \"Talemai Moon 2\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 40,\n                GM = 141264000,\n                gravity = 0.09602446196397631,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = -13503090,\n                    y = 55594325,\n                    z = 769838.64\n                },\n                radius = 12000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"S\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 1809557376,\n                surfaceAverageAltitude = 250,\n                surfaceMaxAltitude = 450,\n                surfaceMinAltitude = 0,\n                systemZone = nil,\n                territories = 1922,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [41] = {\n                name = \"Talemai Moon 3\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 41,\n                GM = 106830900,\n                gravity = 0.08802242599860607,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = -12800515,\n                    y = 55700259,\n                    z = 325207.84\n                },\n                radius = 11000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"XS\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 1520530944,\n                surfaceAverageAltitude = 190,\n                surfaceMaxAltitude = 400,\n                surfaceMinAltitude = 0,\n                systemZone = nil,\n                territories = 1922,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [8] = {\n                name = \"Teoma\",\n                description = \"[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.7834,\n                atmosphericEngineMaxAltitude = 5580,\n                biosphere = \"Forest\",\n                classification = \"Mesoplanet\",\n                bodyId = 8,\n                GM = 18477723600,\n                gravity = 0.48812434578525177,\n                fullAtmosphericDensityMaxAltitude = 15,\n                habitability = \"High\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 6280,\n                numSatellites = 0,\n                positionFromSun = 8,\n                center = {\n                    x = 80865538,\n                    y = 54665536,\n                    z = -934463.94\n                },\n                radius = 62000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"L\",\n                spaceEngineMinAltitude = 3420,\n                surfaceArea = 48305131520,\n                surfaceAverageAltitude = 700,\n                surfaceMaxAltitude = 1100,\n                surfaceMinAltitude = -200,\n                systemZone = \"High\",\n                territories = 60752,\n                type = \"Planet\",\n                waterLevel = 0,\n                planetarySystemId = 0\n            },\n            [3] = {\n                name = \"Thades\",\n                description = \"Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0.03552,\n                atmosphericEngineMaxAltitude = 32180,\n                biosphere = \"Desert\",\n                classification = \"Thermoplanet\",\n                bodyId = 3,\n                GM = 11776905000,\n                gravity = 0.49612641213015557,\n                fullAtmosphericDensityMaxAltitude = 150,\n                habitability = \"Low\",\n                hasAtmosphere = true,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 32800,\n                numSatellites = 2,\n                positionFromSun = 3,\n                center = {\n                    x = 29165536,\n                    y = 10865536,\n                    z = 65536\n                },\n                radius = 49000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 21400,\n                surfaceArea = 30171856896,\n                surfaceAverageAltitude = 13640,\n                surfaceMaxAltitude = 13690,\n                surfaceMinAltitude = 370,\n                systemZone = \"Low\",\n                territories = 38882,\n                type = \"Planet\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [30] = {\n                name = \"Thades Moon 1\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 30,\n                GM = 211564034,\n                gravity = 0.11202853997062348,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 29214402,\n                    y = 10907080.695,\n                    z = 433858.2\n                },\n                radius = 14000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 2463008768,\n                surfaceAverageAltitude = 60,\n                surfaceMaxAltitude = 300,\n                surfaceMinAltitude = 0,\n                systemZone = nil,\n                territories = 3002,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            },\n            [31] = {\n                name = \"Thades Moon 2\",\n                description = \"\",\n                antiGravMinAltitude = 1000,\n                atmosphericDensityAboveSurface = 0,\n                atmosphericEngineMaxAltitude = 0,\n                biosphere = \"\",\n                classification = \"\",\n                bodyId = 31,\n                GM = 264870000,\n                gravity = 0.12003058201190042,\n                fullAtmosphericDensityMaxAltitude = 0,\n                habitability = \"\",\n                hasAtmosphere = false,\n                isSanctuary = false,\n                noAtmosphericDensityAltitude = 0,\n                numSatellites = 0,\n                positionFromSun = 0,\n                center = {\n                    x = 29404193,\n                    y = 10432768,\n                    z = 19554.131\n                },\n                radius = 15000,\n                safeAreaEdgeAltitude = 500000,\n                size = \"M\",\n                spaceEngineMinAltitude = 0,\n                surfaceArea = 2827433472,\n                surfaceAverageAltitude = 70,\n                surfaceMaxAltitude = 350,\n                surfaceMinAltitude = 0,\n                systemZone = nil,\n                territories = 3632,\n                type = \"\",\n                waterLevel = nil,\n                planetarySystemId = 0\n            }\n        }\n    }\nend\nlocal function PlanetRef()\n    --[[                    START OF LOCAL IMPLEMENTATION DETAILS             ]]--\n    -- Type checks\n    local function isNumber(n)\n        return type(n) == 'number'\n    end\n    local function isSNumber(n)\n        return type(tonum(n)) == 'number'\n    end\n    local function isTable(t)\n        return type(t) == 'table'\n    end\n    local function isString(s)\n        return type(s) == 'string'\n    end\n    local function isVector(v)\n        return isTable(v) and isNumber(v.x and v.y and v.z)\n    end\n    local function isMapPosition(m)\n        return isTable(m) and isNumber(m.latitude and m.longitude and m.altitude and m.bodyId and m.systemId)\n    end\n    -- Constants\n    local deg2rad = math.pi / 180\n    local rad2deg = 180 / math.pi\n    local epsilon = 1e-10\n    local num = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\n    local posPattern = '::pos{' .. num .. ',' .. num .. ',' .. num .. ',' .. num .. ',' .. num .. '}'\n    -- Utilities\n    local utils = require('cpml.utils')\n    local vec3 = require('cpml.vec3')\n    local function formatNumber(n)\n        local result = string.gsub(string.reverse(stringf('%.4f', n)), '^0*%.?', '')\n        return result == '' and '0' or string.reverse(result)\n    end\n    local function formatValue(obj)\n        if isVector(obj) then\n            return stringf('{x=%.3f,y=%.3f,z=%.3f}', obj.x, obj.y, obj.z)\n        end\n        if isTable(obj) and not getmetatable(obj) then\n            local list = {}\n            local nxt = next(obj)\n            if type(nxt) == 'nil' or nxt == 1 then -- assume this is an array\n                list = obj\n            else\n                for k, v in pairs(obj) do\n                    local value = formatValue(v)\n                    if type(k) == 'number' then\n                        table.insert(list, stringf('[%s]=%s', k, value))\n                    else\n                        table.insert(list, stringf('%s=%s', k, value))\n                    end\n                end\n            end\n            return stringf('{%s}', table.concat(list, ','))\n        end\n        if isString(obj) then\n            return stringf(\"'%s'\", obj:gsub(\"'\", [[\\']]))\n        end\n        return tostring(obj)\n    end\n    -- CLASSES\n    -- BodyParameters: Attributes of planetary bodies (planets and moons)\n    local BodyParameters = {}\n    BodyParameters.__index = BodyParameters\n    BodyParameters.__tostring = function(obj, indent)\n        local keys = {}\n        for k in pairs(obj) do\n            table.insert(keys, k)\n        end\n        table.sort(keys)\n        local list = {}\n        for _, k in ipairs(keys) do\n            local value = formatValue(obj[k])\n            if type(k) == 'number' then\n                table.insert(list, stringf('[%s]=%s', k, value))\n            else\n                table.insert(list, stringf('%s=%s', k, value))\n            end\n        end\n        if indent then\n            return stringf('%s%s', indent, table.concat(list, ',\\n' .. indent))\n        end\n        return stringf('{%s}', table.concat(list, ','))\n    end\n    BodyParameters.__eq = function(lhs, rhs)\n        return lhs.planetarySystemId == rhs.planetarySystemId and lhs.bodyId == rhs.bodyId and\n                float_eq(lhs.radius, rhs.radius) and float_eq(lhs.center.x, rhs.center.x) and\n                float_eq(lhs.center.y, rhs.center.y) and float_eq(lhs.center.z, rhs.center.z) and\n                float_eq(lhs.GM, rhs.GM)\n    end\n    local function mkBodyParameters(systemId, bodyId, radius, worldCoordinates, GM)\n        -- 'worldCoordinates' can be either table or vec3\n        assert(isSNumber(systemId), 'Argument 1 (planetarySystemId) must be a number:' .. type(systemId))\n        assert(isSNumber(bodyId), 'Argument 2 (bodyId) must be a number:' .. type(bodyId))\n        assert(isSNumber(radius), 'Argument 3 (radius) must be a number:' .. type(radius))\n        assert(isTable(worldCoordinates),\n            'Argument 4 (worldCoordinates) must be a array or vec3.' .. type(worldCoordinates))\n        assert(isSNumber(GM), 'Argument 5 (GM) must be a number:' .. type(GM))\n        return setmetatable({\n            planetarySystemId = tonum(systemId),\n            bodyId = tonum(bodyId),\n            radius = tonum(radius),\n            center = vec3(worldCoordinates),\n            GM = tonum(GM)\n        }, BodyParameters)\n    end\n    -- MapPosition: Geographical coordinates of a point on a planetary body.\n    local MapPosition = {}\n    MapPosition.__index = MapPosition\n    MapPosition.__tostring = function(p)\n        return stringf('::pos{%d,%d,%s,%s,%s}', p.systemId, p.bodyId, formatNumber(p.latitude * rad2deg),\n                formatNumber(p.longitude * rad2deg), formatNumber(p.altitude))\n    end\n    MapPosition.__eq = function(lhs, rhs)\n        return lhs.bodyId == rhs.bodyId and lhs.systemId == rhs.systemId and\n                float_eq(lhs.latitude, rhs.latitude) and float_eq(lhs.altitude, rhs.altitude) and\n                (float_eq(lhs.longitude, rhs.longitude) or float_eq(lhs.latitude, math.pi / 2) or\n                    float_eq(lhs.latitude, -math.pi / 2))\n    end\n    -- latitude and longitude are in degrees while altitude is in meters\n    local function mkMapPosition(overload, bodyId, latitude, longitude, altitude)\n        local systemId = overload -- Id or '::pos{...}' string\n        \n        if isString(overload) and not longitude and not altitude and not bodyId and not latitude then\n            systemId, bodyId, latitude, longitude, altitude = stringmatch(overload, posPattern)\n            assert(systemId, 'Argument 1 (position string) is malformed.')\n        else\n            assert(isSNumber(systemId), 'Argument 1 (systemId) must be a number:' .. type(systemId))\n            assert(isSNumber(bodyId), 'Argument 2 (bodyId) must be a number:' .. type(bodyId))\n            assert(isSNumber(latitude), 'Argument 3 (latitude) must be in degrees:' .. type(latitude))\n            assert(isSNumber(longitude), 'Argument 4 (longitude) must be in degrees:' .. type(longitude))\n            assert(isSNumber(altitude), 'Argument 5 (altitude) must be in meters:' .. type(altitude))\n        end\n        systemId = tonum(systemId)\n        bodyId = tonum(bodyId)\n        latitude = tonum(latitude)\n        longitude = tonum(longitude)\n        altitude = tonum(altitude)\n        if bodyId == 0 then -- this is a hack to represent points in space\n            return setmetatable({\n                latitude = latitude,\n                longitude = longitude,\n                altitude = altitude,\n                bodyId = bodyId,\n                systemId = systemId\n            }, MapPosition)\n        end\n        return setmetatable({\n            latitude = deg2rad * uclamp(latitude, -90, 90),\n            longitude = deg2rad * (longitude % 360),\n            altitude = altitude,\n            bodyId = bodyId,\n            systemId = systemId\n        }, MapPosition)\n    end\n    -- PlanetarySystem - map body IDs to BodyParameters\n    local PlanetarySystem = {}\n    PlanetarySystem.__index = PlanetarySystem\n    PlanetarySystem.__tostring = function(obj, indent)\n        local sep = indent and (indent .. '  ')\n        local bdylist = {}\n        local keys = {}\n        for k in pairs(obj) do\n            table.insert(keys, k)\n        end\n        table.sort(keys)\n        for _, bi in ipairs(keys) do\n            bdy = obj[bi]\n            local bdys = BodyParameters.__tostring(bdy, sep)\n            if indent then\n                table.insert(bdylist, stringf('[%s]={\\n%s\\n%s}', bi, bdys, indent))\n            else\n                table.insert(bdylist, stringf('  [%s]=%s', bi, bdys))\n            end\n        end\n        if indent then\n            return stringf('\\n%s%s%s', indent, table.concat(bdylist, ',\\n' .. indent), indent)\n        end\n        return stringf('{\\n%s\\n}', table.concat(bdylist, ',\\n'))\n    end\n    local function mkPlanetarySystem(referenceTable)\n        local atlas = {}\n        local pid\n        for _, v in pairs(referenceTable) do\n            local id = v.planetarySystemId\n            if type(id) ~= 'number' then\n                error('Invalid planetary system ID: ' .. tostring(id))\n            elseif pid and id ~= pid then\n                error('Mistringmatch planetary system IDs: ' .. id .. ' and ' .. pid)\n            end\n            local bid = v.bodyId\n            if type(bid) ~= 'number' then\n                error('Invalid body ID: ' .. tostring(bid))\n            elseif atlas[bid] then\n                error('Duplicate body ID: ' .. tostring(bid))\n            end\n            setmetatable(v.center, getmetatable(vec3.unit_x))\n            atlas[bid] = setmetatable(v, BodyParameters)\n            pid = id\n        end\n        return setmetatable(atlas, PlanetarySystem)\n    end\n    -- PlanetaryReference - map planetary system ID to PlanetarySystem\n    PlanetaryReference = {}\n    local function mkPlanetaryReference(referenceTable)\n        return setmetatable({\n            galaxyAtlas = referenceTable or {}\n        }, PlanetaryReference)\n    end\n    PlanetaryReference.__index = function(t, i)\n        if type(i) == 'number' then\n            local system = t.galaxyAtlas[i]\n            return mkPlanetarySystem(system)\n        end\n        return rawget(PlanetaryReference, i)\n    end\n    PlanetaryReference.__pairs = function(obj)\n        return function(t, k)\n            local nk, nv = next(t, k)\n            return nk, nv and mkPlanetarySystem(nv)\n        end, obj.galaxyAtlas, nil\n    end\n    PlanetaryReference.__tostring = function(obj)\n        local pslist = {}\n        for _, ps in pairs(obj or {}) do\n            local psi = ps:getPlanetarySystemId()\n            local pss = PlanetarySystem.__tostring(ps, '    ')\n            table.insert(pslist, stringf('  [%s]={%s\\n  }', psi, pss))\n        end\n        return stringf('{\\n%s\\n}\\n', table.concat(pslist, ',\\n'))\n    end\n    PlanetaryReference.BodyParameters = mkBodyParameters\n    PlanetaryReference.MapPosition = mkMapPosition\n    PlanetaryReference.PlanetarySystem = mkPlanetarySystem\n    function PlanetaryReference.createBodyParameters(planetarySystemId, bodyId, surfaceArea, aPosition,\n        verticalAtPosition, altitudeAtPosition, gravityAtPosition)\n        assert(isSNumber(planetarySystemId),\n            'Argument 1 (planetarySystemId) must be a number:' .. type(planetarySystemId))\n        assert(isSNumber(bodyId), 'Argument 2 (bodyId) must be a number:' .. type(bodyId))\n        assert(isSNumber(surfaceArea), 'Argument 3 (surfaceArea) must be a number:' .. type(surfaceArea))\n        assert(isTable(aPosition), 'Argument 4 (aPosition) must be an array or vec3:' .. type(aPosition))\n        assert(isTable(verticalAtPosition),\n            'Argument 5 (verticalAtPosition) must be an array or vec3:' .. type(verticalAtPosition))\n        assert(isSNumber(altitudeAtPosition),\n            'Argument 6 (altitude) must be in meters:' .. type(altitudeAtPosition))\n        assert(isSNumber(gravityAtPosition),\n            'Argument 7 (gravityAtPosition) must be number:' .. type(gravityAtPosition))\n        local radius = msqrt(surfaceArea / 4 / math.pi)\n        local distance = radius + altitudeAtPosition\n        local center = vec3(aPosition) + distance * vec3(verticalAtPosition)\n        local GM = gravityAtPosition * distance * distance\n        return mkBodyParameters(planetarySystemId, bodyId, radius, center, GM)\n    end\n\n    PlanetaryReference.isMapPosition = isMapPosition\n    function PlanetaryReference:getPlanetarySystem(overload)\n        -- if galaxyAtlas then\n        if i == nil then i = 0 end\n        if nv == nil then nv = 0 end\n        local planetarySystemId = overload\n        if isMapPosition(overload) then\n            planetarySystemId = overload.systemId\n        end\n        if type(planetarySystemId) == 'number' then\n            local system = self.galaxyAtlas[i]\n            if system then\n                if getmetatable(nv) ~= PlanetarySystem then\n                    system = mkPlanetarySystem(system)\n                end\n                return system\n            end\n        end\n        -- end\n        -- return nil\n    end\n\n    function PlanetarySystem:sizeCalculator(body)\n        return 1.05*body.radius\n    end\n     \n    function PlanetarySystem:castIntersections(origin, direction, sizeCalculator, bodyIds, collection, sorted)\n        local candidates = {}\n        local selfie = collection or self\n        -- Since we don't use bodyIds anywhere, got rid of them\n        -- It was two tables doing basically the same thing\n        \n        -- Changed this to insert the body to candidates\n        for _, body in pairs(selfie) do\n            table.insert(candidates, body)\n        end\n        -- Added this because, your knownContacts list is already sorted, can skip an expensive re-sort\n        if not sorted then\n            table.sort(candidates, function (b1, b2)\n                return (b1.center - origin):len() < (b2.center - origin):len()\n            end)\n        end\n        local dir = direction:normalize()\n        -- Use the body directly from the for loop instead of getting it with i\n        for _, body in ipairs(candidates) do\n            local c_oV3 = body.center - origin\n            -- Changed to the new method.  IDK if this is how self works but I think so\n            local radius = self:sizeCalculator(body)\n            local dot = c_oV3:dot(dir)\n            local desc = dot ^ 2 - (c_oV3:len2() - radius ^ 2)\n            if desc >= 0 then\n                local root = msqrt(desc)\n                local farSide = dot + root\n                local nearSide = dot - root\n                if nearSide > 0 then\n                    return body, farSide, nearSide\n                elseif farSide > 0 then\n                    return body, farSide, nil\n                end\n            end\n        end\n        return nil, nil, nil\n    end\n\n    function PlanetarySystem:closestBody(coordinates)\n        assert(type(coordinates) == 'table', 'Invalid coordinates.')\n        local minDistance2, body\n        local coord = vec3(coordinates)\n        for _, params in pairs(self) do\n            local distance2 = (params.center - coord):len2()\n            if (not body or distance2 < minDistance2) and params.name ~= \"Space\" then -- Never return space.  \n                body = params\n                minDistance2 = distance2\n            end\n        end\n        return body\n    end\n\n    function PlanetarySystem:convertToBodyIdAndWorldCoordinates(overload)\n        local mapPosition = overload\n        if isString(overload) then\n            mapPosition = mkMapPosition(overload)\n        end\n        if mapPosition.bodyId == 0 then\n            return 0, vec3(mapPosition.latitude, mapPosition.longitude, mapPosition.altitude)\n        end\n        local params = self:getBodyParameters(mapPosition)\n        if params then\n            return mapPosition.bodyId, params:convertToWorldCoordinates(mapPosition)\n        end\n    end\n\n    function PlanetarySystem:getBodyParameters(overload)\n        local bodyId = overload\n        if isMapPosition(overload) then\n            bodyId = overload.bodyId\n        end\n        assert(isSNumber(bodyId), 'Argument 1 (bodyId) must be a number:' .. type(bodyId))\n        return self[bodyId]\n    end\n\n    function PlanetarySystem:getPlanetarySystemId()\n        local _, v = next(self)\n        return v and v.planetarySystemId\n    end\n\n    function BodyParameters:convertToMapPosition(worldCoordinates)\n        assert(isTable(worldCoordinates),\n            'Argument 1 (worldCoordinates) must be an array or vec3:' .. type(worldCoordinates))\n        local worldVec = vec3(worldCoordinates)\n        if self.bodyId == 0 then\n            return setmetatable({\n                latitude = worldVec.x,\n                longitude = worldVec.y,\n                altitude = worldVec.z,\n                bodyId = 0,\n                systemId = self.planetarySystemId\n            }, MapPosition)\n        end\n        local coords = worldVec - self.center\n        local distance = coords:len()\n        local altitude = distance - self.radius\n        local latitude = 0\n        local longitude = 0\n        if not float_eq(distance, 0) then\n            local phi = atan(coords.y, coords.x)\n            longitude = phi >= 0 and phi or (2 * math.pi + phi)\n            latitude = math.pi / 2 - math.acos(coords.z / distance)\n        end\n        return setmetatable({\n            latitude = latitude,\n            longitude = longitude,\n            altitude = altitude,\n            bodyId = self.bodyId,\n            systemId = self.planetarySystemId\n        }, MapPosition)\n    end\n\n    function BodyParameters:convertToWorldCoordinates(overload)\n        local mapPosition = isString(overload) and mkMapPosition(overload) or overload\n        if mapPosition.bodyId == 0 then -- support deep space map position\n            return vec3(mapPosition.latitude, mapPosition.longitude, mapPosition.altitude)\n        end\n        assert(isMapPosition(mapPosition), 'Argument 1 (mapPosition) is not an instance of \"MapPosition\".')\n        assert(mapPosition.systemId == self.planetarySystemId,\n            'Argument 1 (mapPosition) has a different planetary system ID.')\n        assert(mapPosition.bodyId == self.bodyId, 'Argument 1 (mapPosition) has a different planetary body ID.')\n        local xproj = math.cos(mapPosition.latitude)\n        return self.center + (self.radius + mapPosition.altitude) *\n                vec3(xproj * math.cos(mapPosition.longitude), xproj * math.sin(mapPosition.longitude),\n                    math.sin(mapPosition.latitude))\n    end\n\n    function BodyParameters:getAltitude(worldCoordinates)\n        return (vec3(worldCoordinates) - self.center):len() - self.radius\n    end\n\n    function BodyParameters:getDistance(worldCoordinates)\n        return (vec3(worldCoordinates) - self.center):len()\n    end\n\n    function BodyParameters:getGravity(worldCoordinates)\n        local radial = self.center - vec3(worldCoordinates) -- directed towards body\n        local len2 = radial:len2()\n        return (self.GM / len2) * radial / msqrt(len2)\n    end\n    -- end of module\n    return setmetatable(PlanetaryReference, {\n        __call = function(_, ...)\n            return mkPlanetaryReference(...)\n        end\n    })\nend\n\nPlanetaryReference = PlanetRef()\ngalaxyReference = PlanetaryReference(Atlas())\nHelios = galaxyReference[0]\n\n-- find my hubs -- Hard limit of 2 hubs. You can connect more, but they'll be ignored.\nlocal hublist = { hub1, hub2 } --, hub3, hub4, hub5, hub6, hub7, hub8 }\nHubs = {}\nItemsList = {}\nItemsPage = 1\n\nfor i,v in ipairs(hublist) do\n    if hublist[i] then\n        local t = { eId = hublist[i].getId(), storeAcq = false, hub = hublist[i] }\n        table.insert(Hubs, t)\n    end\nend\n\n-- base functions to be used later\nfunction round2 (num, numDecimalPlaces)\n    return tonumber(string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num))\n  end\n\nfunction maxForceForward ()\n    local axisCRefDirection = vec3(core.getConstructOrientationForward())\n    local longitudinalEngineTags = 'thrust analog longitudinal'\n    local maxKPAlongAxis = core.getMaxKinematicsParametersAlongAxis(longitudinalEngineTags, {axisCRefDirection:unpack()})\n    if unit.getAtmosphereDensity() == 0 then -- we are in space\n        return maxKPAlongAxis[3]\n    else\n        return maxKPAlongAxis[1]\n    end\nend\n\nfunction getKeysSortedByValue(tbl, sortFunction)\n    local keys = {}\n    for key in pairs(tbl) do\n        table.insert(keys, key)\n    end\n    table.sort(keys, function(a, b)\n        return sortFunction(tbl[a], tbl[b])\n    end)\n    return keys\nend\n\nfunction getItems (hubs)\n    if DEBUG then system.print(\"Retreiving items from hubs\") end\n    local items = {}\n    local itemList = {}\n    for h, _ in ipairs(hubs) do\n        local c = json.decode(hubs[h][\"hub\"].getItemsList())\n        for i, _ in ipairs(c) do\n            local item = c[i]\n            local t = {}\n            if itemList[item[\"name\"]] ~= nil then\n                local idx = itemList[item[\"name\"]]\n                items[idx][\"qty\"] = items[idx][\"qty\"] + round2(item[\"quantity\"], 2)\n            else\n                itemList[item[\"name\"]] = #items+1\n                t[\"id\"] = #items+1\n                t[\"name\"] = item[\"name\"]\n                t[\"qty\"] = round2(item[\"quantity\"], 2)\n                t[\"unitv\"] = round2(item[\"unitVolume\"], 2)\n                t[\"unitm\"] = round2(item[\"unitMass\"], 2)\n            table.insert(items,t)\n            end\n        end\n    end\n    return items\nend\n\nfunction sortItems (items)\n    if DEBUG then system.print(\"Sorting items from hubs\") end\n    local sorting = {}\n    local sorted = {}\n    for i,_ in ipairs(items) do\n        local qty = items[i][\"qty\"]\n        local unit = 0\n        if SortByMass then\n            unit = items[i][\"unitm\"]\n        else \n            unit = items[i][\"unitv\"]\n        end\n        local calc = qty*unit\n        table.insert(sorting, i, calc)\n    end\n    local sortedKeys = getKeysSortedByValue(sorting, function(a, b) return a > b end)\n    sorting = nil\n    for _, key in ipairs(sortedKeys) do\n        local tt = items[key]\n        tt[\"id\"] = #sorted+1\n        table.insert(sorted, tt)\n    end\n    return sorted\nend\n\nfunction createMessageList ()\n    local t, core = {}, {}\n    if Ship then\n        core = getShip()\n    elseif Land then\n        core = getLand()\n    elseif Space then\n        core = getSpace()\n    end\n    if DEBUG then system.print(\"Processing messages\") end\n    table.insert(t, \"START\")\n    local maxItems = ItemsPage*12\n    local index = 1\n    for i=(maxItems-11),maxItems do\n        local tt = ItemsList[i]\n        if tt ~= nil then\n            tt[\"id\"] = index\n            table.insert(t, tt)\n        end\n        index = index+1\n    end\n    table.insert(t, core)\n    table.insert(t, \"DONE\")\n    return t\nend\n\nfunction sendOutput (message)\n    if message ~= nil then\n        message = json.encode(message)\n        if DEBUG then system.print(\"Raw: \"..rslib.toString(message)) end\n        screen1.setScriptInput(message)\n    end\nend\n\nfunction processOutput (messages)\n    if DEBUG then system.print(\"Sending \"..rslib.toString(messages[1])) end\n    if messages[1] == \"START\" then\n        sendOutput(\"START\")\n        table.remove(messages, 1)\n        waitForAck()\n        return messages\n    elseif messages[1] == \"DONE\" then\n        sendOutput(\"DONE\")\n        return false\n    else\n        sendOutput(messages[1])\n        table.remove(messages, 1)\n        waitForAck()\n        return messages\n    end\nend\n\nfunction waitForAck ()\n    local ack = screen1.getScriptOutput() or false\n    if ack and ack ~= \"\" then\n        if DEBUG then system.print(ack..\" received.\") end\n        if ack == \"START\" or ack == \"ACKSYN\" then\n            DataStart = true\n            ACK = true\n            screen1.clearScriptOutput()\n            ack = nil\n        end\n        if ack == \"ACK\" then\n            sendOutput(\"SYN\")\n            screen1.clearScriptOutput()\n            ack = nil\n        end\n        if ack == \"RESET\" or ack == \"PREV\" or ack == \"NEXT\" then\n            DataStart = true\n            MsgList = false\n            if ack == \"PREV\" then\n                if ItemsPage == 1 then\n                    ItemsPage = TotalPages\n                else\n                    ItemsPage = ItemsPage - 1\n                end\n            elseif ack == \"NEXT\" then\n                if ItemsPage == TotalPages then\n                    ItemsPage = 1\n                else\n                    ItemsPage = ItemsPage + 1\n                end\n            end\n            screen1.clearScriptOutput()\n            ack = nil\n        end\n    end\nend\n\nfunction hubsItems (hubs)\n    local m = 0\n    local l = 0\n    for i=1,#hubs do\n        m = m + hubs[i][\"hub\"].getItemsMass()\n        l = l + hubs[i][\"hub\"].getItemsVolume()\n    end\n    return m, l\nend\n\nfunction getShip ()\n    local hM, hV = hubsItems(Hubs)\n    local tM = core.getConstructMass()\n    local g = core.g()\n    local mt = maxForceForward()\n    local t = {}\n    local planet = Helios:closestBody(core.getConstructWorldPos())\n    t[\"name\"] = \"ship\"\n    t[\"mass\"] = round2(tM, 2)\n    t[\"hmass\"] = round2(hM, 2)\n    t[\"hmaxvol\"] = round2(MaxVolume, 2)\n    t[\"hvol\"] = round2(hV, 2)\n    t[\"g\"] = round2(g, 2)\n    t[\"maxth\"] = round2(mt, 2)\n    t[\"pl\"] = planet.name or \"Helios\"\n    if DEBUG then system.print(\"Ship: \"..rslib.toString(t)) end\n    return t\nend\n\nfunction getLand ()\n    local hM, hV = hubsItems(Hubs)\n    local t = {}\n    local planet = Helios:closestBody(core.getConstructWorldPos())\n    t[\"name\"] = \"land\"\n    t[\"hmass\"] = round2(hM, 2)\n    t[\"hmaxvol\"] = round2(MaxVolume, 2)\n    t[\"hvol\"] = round2(hV, 2)\n    t[\"pl\"] = planet.name or \"Helios\"\n    if DEBUG then system.print(\"Land: \"..rslib.toString(t)) end\n    return t\nend\n\nfunction getSpace ()\n    local hM, hV = hubsItems(Hubs)\n    local tM = core.getConstructMass()\n    local g = core.g()\n    local t = {}\n    local planet = Helios:closestBody(core.getConstructWorldPos())\n    t[\"name\"] = \"space\"\n    t[\"mass\"] = round2(tM, 2)\n    t[\"hmass\"] = round2(hM, 2)\n    t[\"hmaxvol\"] = round2(MaxVolume, 2)\n    t[\"hvol\"] = round2(hV, 2)\n    t[\"g\"] = round2(g, 5)\n    t[\"pl\"] = planet.name or \"Helios\"\n    if DEBUG then system.print(\"Space: \"..rslib.toString(t)) end\n    return t\nend\n\n-- Initializations\nif #Hubs == 0 or not core or not screen1 then\n    system.print(\"Error: Elements not found. Please attach your screen, core, and/or hubs. Exiting.\")\n    unit.exit()\nelse\n    screen1.clearScriptOutput()\n    local coreData = json.decode(core.getData())\n    if DEBUG then system.print(\"Core: \"..rslib.toString(coreData)) end\n    if coreData[\"name\"]:find(\"Dynamic\") then\n        if DEBUG then system.print(\"Ship\") end\n        Ship = true\n    elseif coreData[\"name\"]:find(\"Static\") then\n        if DEBUG then system.print(\"Land\") end\n        Land = true\n    elseif coreData[\"name\"]:find(\"Space\") then\n        if DEBUG then system.print(\"Space\") end\n        Space = true\n    end\n\n    system.print(\"Acquiring Storage...\")\n    for i, v in ipairs(Hubs) do\n        if DEBUG then system.print(\"Opening hub \"..i) end\n        v[\"hub\"].acquireStorage()\n    end\n\n    -- Activate Timers\n    StorageTimeout = 5\n    unit.setTimer(\"storage\",1)\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"10"}],"methods":[],"events":[]}